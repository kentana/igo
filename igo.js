// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    var Point, boardCv, boardImage, boardMargin, canvasPos, canvasSize, clearCanvas, col, cursorCv, drawBoard, getPoint, lineColor, lineSpace, numberOfLine, numberOfPoints, points, row, stone, stoneCv, stoneRadius, _i, _j;
    numberOfLine = 19;
    numberOfPoints = numberOfLine - 1;
    lineColor = "black";
    boardImage = new Image();
    boardImage.src = "image/wood.jpg";
    boardCv = $("#board")[0];
    stoneCv = $("#stone")[0];
    cursorCv = $("#cursor")[0];
    canvasSize = 600;
    boardMargin = canvasSize / numberOfLine * 0.5;
    lineSpace = (canvasSize - boardMargin * 2) / (numberOfLine - 1);
    stoneRadius = lineSpace / 2 * 0.7;
    canvasPos = boardCv.getBoundingClientRect();
    stone = "black";
    Point = (function() {
      function Point(col, row) {
        this.col = col;
        this.row = row;
        this.stone = "empty";
        this.x = boardMargin + this.col * lineSpace;
        this.y = boardMargin + this.row * lineSpace;
      }

      Point.prototype.setStone = function(stone) {
        return this.stone = stone;
      };

      Point.prototype.emptyStone = function() {
        return this.stone = "empty";
      };

      Point.prototype.drawStone = function() {
        var ctx;
        if (this.stone === "empty") {
          return null;
        }
        ctx = stoneCv.getContext("2d");
        ctx.fillStyle = this.stone;
        ctx.arc(this.x, this.y, stoneRadius, 0, Math.PI * 2, false);
        return ctx.fill();
      };

      Point.prototype.onMouse = function(stone) {
        var ctx;
        ctx = cursorCv.getContext("2d");
        ctx.clearRect(0, 0, canvasSize, canvasSize);
        ctx.strokeStyle = stone;
        ctx.globalAlpha = 0.3;
        ctx.beginPath();
        ctx.arc(this.x, this.y, stoneRadius, 0, Math.PI * 2, false);
        return ctx.stroke();
      };

      return Point;

    })();
    drawBoard = function() {
      var ctx, dot, dotLines, endOfLine, line, thisLine, _i, _j, _len, _ref, _results;
      ctx = boardCv.getContext("2d");
      ctx.strokeStyle = lineColor;
      ctx.fillStyle = lineColor;
      ctx.drawImage(boardImage, 0, 0, canvasSize, canvasSize);
      endOfLine = canvasSize - boardMargin;
      dotLines = [3, 9, 15];
      _results = [];
      for (line = _i = 0, _ref = numberOfLine - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; line = 0 <= _ref ? ++_i : --_i) {
        thisLine = boardMargin + line * lineSpace;
        ctx.beginPath();
        ctx.moveTo(boardMargin, thisLine);
        ctx.lineTo(endOfLine, thisLine);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(thisLine, boardMargin);
        ctx.lineTo(thisLine, endOfLine);
        ctx.stroke();
        if (numberOfLine === 19 && __indexOf.call(dotLines, line) >= 0) {
          ctx.beginPath();
          for (_j = 0, _len = dotLines.length; _j < _len; _j++) {
            dot = dotLines[_j];
            ctx.arc(thisLine, boardMargin + dot * lineSpace, 3, 0, Math.PI * 2, false);
          }
          _results.push(ctx.fill());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    clearCanvas = function(cv) {
      var ctx;
      ctx = cv.getContext("2d");
      return ctx.clearRect(0, 0, canvasSize, canvasSize);
    };
    boardImage.addEventListener("load", drawBoard, false);
    points = [];
    for (col = _i = 0; 0 <= numberOfPoints ? _i <= numberOfPoints : _i >= numberOfPoints; col = 0 <= numberOfPoints ? ++_i : --_i) {
      for (row = _j = 0; 0 <= numberOfPoints ? _j <= numberOfPoints : _j >= numberOfPoints; row = 0 <= numberOfPoints ? ++_j : --_j) {
        points.push(new Point(col, row));
      }
    }
    getPoint = function(ary, x, y) {
      var nearX, nearY, point, pointX, pointY, _k, _len;
      for (_k = 0, _len = ary.length; _k < _len; _k++) {
        point = ary[_k];
        pointX = canvasPos.left + point.x;
        pointY = canvasPos.top + point.y;
        nearX = (pointX - stoneRadius <= x && x <= pointX + stoneRadius);
        nearY = (pointY - stoneRadius <= y && y <= pointY + stoneRadius);
        if (nearX && nearY) {
          return point;
        }
      }
    };
    $(window).on("mousemove", function(e) {
      var pointOnCursor, x, xInCanvas, y, yInCanvas;
      clearCanvas(cursorCv);
      x = e.pageX;
      y = e.pageY;
      xInCanvas = (canvasPos.left <= x && x <= canvasPos.left + canvasSize);
      yInCanvas = (canvasPos.top <= y && y <= canvasPos.top + canvasSize);
      if (xInCanvas && yInCanvas) {
        pointOnCursor = getPoint(points, x, y);
        if (pointOnCursor) {
          return pointOnCursor.onMouse(stone);
        }
      }
    });
    return $(cursorCv).on("click", function(e) {
      var clickedPoint, x, y;
      x = e.pageX;
      y = e.pageY;
      clickedPoint = getPoint(points, x, y);
      return alert("col: " + clickedPoint.col + " row: " + clickedPoint.row);
    });
  });

}).call(this);
